@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json.Linq;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message.myMsg</li>
        <ol>
        @foreach(var s in message.scoreList)
        {
            <li style="color: red">@(s.label + ": " + s.score.ToString("0.00") + "%")</li>
        }
        </ol>        
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<myObject> messages = new List<myObject>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (user, message, result) =>
        {
            var encodedMsg = $"{user}: {message}";            

            var myJarray = JArray.Parse(result).Children().FirstOrDefault();

            List<myScores> sl = new List<myScores>();

            foreach(var item in myJarray)
            {
                sl.Add(item.ToObject<myScores>());
            }

            myObject o = new myObject { myMsg = encodedMsg, scoreList = sl };

            messages.Add(o);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class myObject
    {
        public string myMsg { get; set; }

        public List<myScores> scoreList { get; set; }
    }

    public class myScores
    {
        public string label { get; set; }

        public double score { get; set; }
    }
}